plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.openapi.generator' version '7.2.0'
}

group = 'com.gsuleimanov'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.20'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.liquibase:liquibase-core'
	runtimeOnly 'com.h2database:h2'
}

tasks.named('test') {
	useJUnitPlatform()
}

openApiValidate {
	inputSpec = "$rootDir/src/main/resources/openapi/expenses-api.yaml"
	recommend = true
}

openApiGenerate {
	generatorName = "spring"
	inputSpec = "$rootDir/src/main/resources/openapi/expenses-api.yaml"
	outputDir = "$buildDir/generated"
	apiPackage = "com.gsuleimanov.expenses.api"
	modelPackage = "com.gsuleimanov.expenses.model"
	configOptions = [
		dateLibrary: "java8",
		interfaceOnly: "true",
		skipDefaultInterface: "true",
		useSpringBoot3: "true",
		useTags: "true",
		documentationProvider: "springdoc",
		annotationLibrary: "swagger2"
	]
}

tasks.openApiGenerate.dependsOn tasks.openApiValidate

// Add source set for generated sources
sourceSets {
	main {
		java {
			srcDir "${buildDir}/generated/src/main/java"
		}
	}
}

// Make sure generated sources are compiled
tasks.compileJava.dependsOn tasks.openApiGenerate

// Clean generated sources when running clean task
clean {
	delete "${buildDir}/generated"
}
