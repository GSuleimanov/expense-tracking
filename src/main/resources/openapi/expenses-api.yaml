openapi: 3.0.3
info:
  title: Expenses API
  description: API for expense tracking and management system
  version: 0.0.1

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server

tags:
  - name: expenses
    description: Expense management operations
  - name: categories
    description: Expense categories operations
  - name: users
    description: User management
  - name: payment-methods
    description: Payment methods operations

paths:
  /expenses:
    get:
      operationId: listExpenses
      tags:
        - expenses
      summary: List expenses
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: category
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of expenses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedExpenses'
    post:
      operationId: createExpense
      tags:
        - expenses
      summary: Create new expense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseRequest'
      responses:
        '201':
          description: Expense created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'

  /expenses/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      operationId: getExpenseById
      tags:
        - expenses
      summary: Get expense by ID
      responses:
        '200':
          description: Expense details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
    put:
      operationId: updateExpense
      tags:
        - expenses
      summary: Update expense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseRequest'
      responses:
        '200':
          description: Expense updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
    delete:
      operationId: deleteExpense
      tags:
        - expenses
      summary: Delete expense
      responses:
        '204':
          description: Expense deleted

  /categories:
    get:
      operationId: listCategories
      tags:
        - categories
      summary: List categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      operationId: createCategory
      tags:
        - categories
      summary: Create category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /payment-methods:
    get:
      operationId: listPaymentMethods
      tags:
        - payment-methods
      summary: List payment methods
      responses:
        '200':
          description: List of payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethod'
    post:
      operationId: createPaymentMethod
      tags:
        - payment-methods
      summary: Create payment method
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethodRequest'
      responses:
        '201':
          description: Payment method created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'

  /users/register:
    post:
      operationId: registerUser
      tags:
        - users
      summary: Register new user
      security: []  # No auth required for registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  schemas:
    Expense:
      type: object
      properties:
        id:
          type: integer
          format: int64
        amount:
          type: number
          format: decimal
        description:
          type: string
        expenseDate:
          type: string
          format: date
        location:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ExpenseRequest:
      type: object
      required:
        - amount
        - expenseDate
        - categoryId
        - paymentMethodId
      properties:
        amount:
          type: number
          format: decimal
        description:
          type: string
        expenseDate:
          type: string
          format: date
        location:
          type: string
        categoryId:
          type: integer
          format: int64
        paymentMethodId:
          type: integer
          format: int64

    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string

    PaymentMethod:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        createdAt:
          type: string
          format: date-time

    PagedExpenses:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Expense'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer

    PaymentMethodRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserRegistrationRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 100
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 255
